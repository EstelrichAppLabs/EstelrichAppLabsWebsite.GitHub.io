<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>CI/CD on Estelrich App Labs</title><link>https://www.estelrichapplabs.com/tags/ci/cd/</link><description>Recent content in CI/CD on Estelrich App Labs</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Sun, 13 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://www.estelrichapplabs.com/tags/ci/cd/index.xml" rel="self" type="application/rss+xml"/><item><title>Switching to calendar-based versioning</title><link>https://www.estelrichapplabs.com/blog/2025.07.13_switching-to-calendar-based-versioning/</link><pubDate>Sun, 13 Jul 2025 00:00:00 +0000</pubDate><guid>https://www.estelrichapplabs.com/blog/2025.07.13_switching-to-calendar-based-versioning/</guid><description>&lt;p>For years, I used semantic versioning (1.0.0, 1.1.0, 2.0.0, ..etc.) as the default way to track app releases. It made sense: major for breaking changes, minor for new features, patch for fixes. But the more I built and shipped across my career at multiple companies and more recently as an indie developer, the more I found myself questioning what those numbers were really telling me, or anyone else.&lt;/p></description></item></channel></rss>